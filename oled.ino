#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "DHT.h"

#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif
String strVar;
String input = "";
void setup()   {
  Serial.begin(115200);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  dht.begin();
  display.display();
  delay(2000);
  display.clearDisplay();
}
void loop() {
  strVar = "";
  if (Serial.available()) {
    strVar += Serial.readString();
    input = strVar;
    display.clearDisplay();
  }

  float h = dht.readHumidity();
  int t = dht.readTemperature();
  float f = dht.readTemperature(true);
  if (isnan(h) || isnan(t) || isnan(f)) {
    //Serial.println("Failed to read from DHT sensor!");
    //Firebase.setString("smartHome/sensors/dht11/sensor", "Offline");
    return;
  }
  else {
    //Firebase.setString("smartHome/sensors/dht11/sensor", "Online");
  }

  temp(t, 0);
  humidity(h, 70);
  display.drawLine(63, 0, 63, 30, WHITE);
  display.display();
  display.clearDisplay();
  //  Serial.flush();
  delay(1000);
}

void temp(int tem, int pos) {
  static const unsigned char PROGMEM temp[] =
  {
    0x01, 0xc0, 0x00, 0x03, 0x60, 0x00, 0x02, 0x20, 0x00, 0x02, 0x20, 0x00, 0x7a, 0x20, 0x00, 0x02,
    0x20, 0x00, 0x1a, 0x20, 0x00, 0x02, 0x23, 0xc4, 0x1a, 0x26, 0x6e, 0x02, 0x24, 0x24, 0x7a, 0xa4,
    0x00, 0x02, 0xa4, 0x00, 0x1a, 0xa4, 0x00, 0x02, 0xa4, 0x20, 0x1a, 0xa6, 0x60, 0x02, 0xa3, 0xc0,
    0x7a, 0xa0, 0x00, 0x02, 0xa0, 0x00, 0x02, 0xa0, 0x00, 0x04, 0x90, 0x00, 0x05, 0xd0, 0x00, 0x04,
    0x90, 0x00, 0x02, 0x20, 0x00, 0x01, 0xc0, 0x00

  };

  display.drawBitmap(pos, (display.height() / 4) - 16, temp, 24, 24, WHITE); //X,Y Location
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(pos + 30, 5);
  display.println(tem);
}

void humidity(int humi, int pos) {
  static const unsigned char PROGMEM humidity[] =
  {
    0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x66, 0x00, 0x00, 0xc3, 0x00, 0x00,
    0xc3, 0x00, 0x01, 0x81, 0x80, 0x03, 0x00, 0xc0, 0x02, 0x00, 0x40, 0x06, 0x60, 0x60, 0x0c, 0xf0,
    0x30, 0x08, 0xb3, 0x10, 0x18, 0xe7, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x1c, 0x18, 0x18, 0x38, 0x18,
    0x18, 0x70, 0x18, 0x08, 0xe7, 0x10, 0x08, 0xcd, 0x10, 0x0c, 0x0f, 0x30, 0x06, 0x06, 0x60, 0x03,
    0x00, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x3c, 0x00

  };

  display.drawBitmap(pos, (display.height() / 4) - 16, humidity, 24, 24, WHITE); //X,Y Location
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(pos + 30, 5);
  display.println(humi);

}

void myrain(void) {
  static const unsigned char PROGMEM myRain[] =
  {

    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00,
    0x00, 0x60, 0x0c, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x01, 0x80, 0x02, 0x00, 0x01, 0x00, 0x01, 0xe0,
    0x02, 0x00, 0x06, 0x78, 0x0e, 0x00, 0x08, 0x0c, 0x30, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x03,
    0x40, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01,
    0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x06, 0x20, 0x00, 0x00, 0x0c,
    0x1c, 0x00, 0x00, 0x78, 0x00, 0x21, 0x08, 0x40, 0x00, 0x21, 0x10, 0x00, 0x00, 0x42, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x84, 0x20, 0x00,
    0x00, 0x84, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  // display.clearDisplay();
  display.drawBitmap(0, (display.height() / 4) - 16, myRain, 32, 32, WHITE); //X,Y Location
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 40);
  display.println("Thunder Strom");
  display.display();
}

void mycloud(void) {
  static const unsigned char PROGMEM myCloud[] =
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00,
    0x00, 0x0e, 0x1c, 0x00, 0x00, 0x18, 0x07, 0x00, 0x00, 0x30, 0x01, 0x00, 0x07, 0xe0, 0x01, 0x80,
    0x1e, 0xc0, 0x00, 0xc0, 0x30, 0x00, 0x00, 0xc0, 0x60, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x78,
    0xc0, 0x00, 0x00, 0x0e, 0xc0, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x01,
    0xc0, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x02, 0x1c, 0x00, 0x00, 0x0e,
    0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  display.clearDisplay();
  display.drawBitmap(0, (display.height() / 4) - 16, myCloud, 32, 32, WHITE); //X,Y Location
  display.display();
}

void mythunder(void) {
  static const unsigned char PROGMEM myThunder[] =
  {
    0x00, 0x0f, 0x80, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xe0, 0x78, 0x00, 0x03, 0x80, 0x1c, 0x00,
    0x03, 0x00, 0x0e, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x03, 0x00,
    0x0c, 0x00, 0x07, 0xf0, 0x0c, 0x00, 0x1f, 0x78, 0x0c, 0x01, 0x98, 0x0c, 0x0e, 0x03, 0x80, 0x06,
    0x3f, 0x83, 0x80, 0x06, 0x71, 0xc7, 0x80, 0x03, 0x60, 0x07, 0x80, 0x03, 0xc0, 0x0d, 0x80, 0x03,
    0xc0, 0x0d, 0x80, 0x03, 0xc0, 0x19, 0xfc, 0x07, 0xc0, 0x19, 0xfc, 0x06, 0x60, 0x30, 0x0c, 0x0c,
    0x78, 0x30, 0x1c, 0x7c, 0x1f, 0xff, 0x9f, 0xf0, 0x07, 0xff, 0xbf, 0xc0, 0x03, 0x61, 0xb6, 0xc0,
    0x03, 0x61, 0xe6, 0xc0, 0x02, 0x21, 0xe4, 0x40, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0x00,
    0x02, 0x21, 0x84, 0x40, 0x03, 0x61, 0x86, 0xc0, 0x03, 0x60, 0x06, 0xc0, 0x02, 0x20, 0x04, 0x40,

  };

  display.clearDisplay();
  display.drawBitmap(0, (display.height() / 4) - 16, myThunder, 32, 32, WHITE); //X,Y Location
  display.display();
}

void mysun(void) {
  static const unsigned char PROGMEM mySun[] =
  {
    0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x81, 0x81, 0x00, 0x00, 0xc1, 0x83, 0x00,
    0x00, 0xc0, 0x03, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00,
    0x38, 0x3e, 0x7c, 0x1c, 0x1c, 0x70, 0x0e, 0x38, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xc7, 0x83, 0x00,
    0x01, 0x8f, 0x01, 0x80, 0x01, 0x9c, 0x01, 0x80, 0x01, 0x98, 0x01, 0x80, 0xf3, 0x18, 0x00, 0xcf,
    0xf3, 0x10, 0x00, 0xcf, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80,
    0x00, 0xc0, 0x03, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x1c, 0x70, 0x0e, 0x38, 0x38, 0x3e, 0x7c, 0x1c,
    0x00, 0x0f, 0xf0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xc0, 0x03, 0x00,
    0x00, 0xc1, 0x83, 0x00, 0x00, 0x81, 0x81, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00,

  };

  display.clearDisplay();
  display.drawBitmap(0, (display.height() / 4) - 16, mySun, 32, 32, WHITE); //X,Y Location
  display.display();
}
